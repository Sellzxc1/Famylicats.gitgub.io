// –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã
let player = {
    x: 2500,
    y: 2500,
    speed: 5,
    health: 100,
    maxHealth: 100,
    level: 1,
    xp: 0,
    xpToNextLevel: 100,
    inventory: [],
    equipment: {
        weapon: null,
        pickaxe: null
    },
    stats: {
        strength: 1,
        agility: 1,
        intelligence: 1,
        stamina: 1,
        statPoints: 0
    },
    skills: []
};

let worldObjects = [];
let mobs = [];
let players = {};
let items = [];
let buildings = [];
let timeOfDay = 'day'; // day, evening, night, morning
let dayCycle = 0; // 0-1440 (24 –º–∏–Ω—É—Ç—ã —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ = 1 –∏–≥—Ä–æ–≤–æ–π –¥–µ–Ω—å)
let isMobile = false;
let joystick = {
    active: false,
    x: 0,
    y: 0,
    angle: 0,
    force: 0
};

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const world = document.getElementById('world');
const playerElement = document.getElementById('player');
const mobsContainer = document.getElementById('mobs');
const itemsContainer = document.getElementById('items');
const dayNightFilter = document.getElementById('day-night');
const healthDisplay = document.getElementById('health');
const xpDisplay = document.getElementById('xp');
const timeDisplay = document.getElementById('time');
const resourcesDisplay = document.getElementById('resources');
const inventoryModal = document.getElementById('inventory');
const craftingModal = document.getElementById('crafting');
const skillsModal = document.getElementById('skills');
const inventoryBtn = document.getElementById('inventory-btn');
const craftBtn = document.getElementById('craft-btn');
const skillsBtn = document.getElementById('skills-btn');
const chatMessages = document.getElementById('chat-messages');
const chatInput = document.getElementById('chat-input');
const loginScreen = document.getElementById('login-screen');
const usernameInput = document.getElementById('username-input');
const startBtn = document.getElementById('start-btn');
const joystickElement = document.getElementById('joystick');
const attackBtn = document.getElementById('attack-btn');
const interactBtn = document.getElementById('interact-btn');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
    isMobile = true;
    document.getElementById('mobile-controls').style.display = 'block';
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É Socket.io
const socket = io();

// –ò–≥—Ä–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
const gameItems = {
    wood: { id: 'wood', name: '–î–µ—Ä–µ–≤–æ', type: 'resource', image: 'assets/tree.png', stackable: true },
    stone: { id: 'stone', name: '–ö–∞–º–µ–Ω—å', type: 'resource', image: 'assets/rock.png', stackable: true },
    iron: { id: 'iron', name: '–ñ–µ–ª–µ–∑–æ', type: 'resource', image: 'assets/rock.png', stackable: true },
    wood_pickaxe: { id: 'wood_pickaxe', name: '–î–µ—Ä–µ–≤—è–Ω–Ω–∞—è –∫–∏—Ä–∫–∞', type: 'pickaxe', image: 'assets/pickaxe_wood.png', damage: 1, efficiency: 1, durability: 30 },
    wood_sword: { id: 'wood_sword', name: '–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –º–µ—á', type: 'weapon', image: 'assets/sword_wood.png', damage: 3, durability: 20 },
    stone_pickaxe: { id: 'stone_pickaxe', name: '–ö–∞–º–µ–Ω–Ω–∞—è –∫–∏—Ä–∫–∞', type: 'pickaxe', image: 'assets/pickaxe_wood.png', damage: 2, efficiency: 1.5, durability: 60 },
    stone_sword: { id: 'stone_sword', name: '–ö–∞–º–µ–Ω–Ω—ã–π –º–µ—á', type: 'weapon', image: 'assets/sword_wood.png', damage: 5, durability: 40 }
};

// –†–µ—Ü–µ–ø—Ç—ã –∫—Ä–∞—Ñ—Ç–∞
const craftingRecipes = [
    { id: 'wood_pickaxe', ingredients: [{ id: 'wood', count: 5 }], result: 'wood_pickaxe' },
    { id: 'wood_sword', ingredients: [{ id: 'wood', count: 5 }], result: 'wood_sword' },
    { id: 'stone_pickaxe', ingredients: [{ id: 'wood', count: 3 }, { id: 'stone', count: 3 }], result: 'stone_pickaxe' },
    { id: 'stone_sword', ingredients: [{ id: 'wood', count: 2 }, { id: 'stone', count: 5 }], result: 'stone_sword' }
];

// –ù–∞–≤—ã–∫–∏
const skills = [
    { id: 'strength', name: '–°–∏–ª–∞', description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —É—Ä–æ–Ω –≤ –±–ª–∏–∂–Ω–µ–º –±–æ—é', maxLevel: 10 },
    { id: 'agility', name: '–õ–æ–≤–∫–æ—Å—Ç—å', description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞ –∏ —É–∫–ª–æ–Ω–µ–Ω–∏—è', maxLevel: 10 },
    { id: 'intelligence', name: '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç', description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –º–∞–≥–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω –∏ –Ω–∞–≤—ã–∫–∏', maxLevel: 10 },
    { id: 'stamina', name: '–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å', description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –∏ –∑–∞—â–∏—Ç—É', maxLevel: 10 }
];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGame() {
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∏—Ä–∞
    generateWorld();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    setupControls();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    setupUI();
    
    // –ù–∞—á–∞–ª–æ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
    gameLoop();
    
    // –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –¥–Ω—è –∏ –Ω–æ—á–∏
    startDayNightCycle();
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–±–æ–≤
    spawnMobs();
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π —Å–æ–∫–µ—Ç–æ–≤
    setupSocketEvents();
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∏—Ä–∞
function generateWorld() {
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ä–µ–≤—å–µ–≤
    for (let i = 0; i < 200; i++) {
        const tree = {
            type: 'tree',
            x: Math.floor(Math.random() * 5000),
            y: Math.floor(Math.random() * 5000),
            health: 3,
            maxHealth: 3
        };
        worldObjects.push(tree);
        
        const treeElement = document.createElement('div');
        treeElement.className = 'tree';
        treeElement.style.left = `${tree.x}px`;
        treeElement.style.top = `${tree.y}px`;
        world.appendChild(treeElement);
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–º–Ω–µ–π
    for (let i = 0; i < 150; i++) {
        const rock = {
            type: 'rock',
            x: Math.floor(Math.random() * 5000),
            y: Math.floor(Math.random() * 5000),
            health: 5,
            maxHealth: 5,
            resource: Math.random() > 0.7 ? 'iron' : 'stone'
        };
        worldObjects.push(rock);
        
        const rockElement = document.createElement('div');
        rockElement.className = 'rock';
        rockElement.style.left = `${rock.x}px`;
        rockElement.style.top = `${rock.y}px`;
        world.appendChild(rockElement);
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
function setupControls() {
    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    document.addEventListener('keydown', (e) => {
        if (e.key === 'i') toggleInventory();
        if (e.key === 'c') toggleCrafting();
        if (e.key === 's') toggleSkills();
        if (e.key === 'Enter') sendChatMessage();
    });
    
    // –ú–æ–±–∏–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    if (isMobile) {
        // –î–∂–æ–π—Å—Ç–∏–∫
        joystickElement.addEventListener('touchstart', handleJoystickStart);
        joystickElement.addEventListener('touchmove', handleJoystickMove);
        joystickElement.addEventListener('touchend', handleJoystickEnd);
        
        // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        attackBtn.addEventListener('touchstart', () => attack());
        interactBtn.addEventListener('touchstart', () => interact());
    } else {
        // –ö–ª–∞–≤–∏—à–∏ WASD –¥–ª—è –ü–ö
        document.addEventListener('keydown', (e) => {
            if (e.key === 'w') player.y -= player.speed;
            if (e.key === 's') player.y += player.speed;
            if (e.key === 'a') player.x -= player.speed;
            if (e.key === 'd') player.x += player.speed;
            if (e.key === ' ') attack();
            if (e.key === 'e') interact();
        });
    }
    
    // –ö–Ω–æ–ø–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    inventoryBtn.addEventListener('click', toggleInventory);
    craftBtn.addEventListener('click', toggleCrafting);
    skillsBtn.addEventListener('click', toggleSkills);
    startBtn.addEventListener('click', startGame);
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    document.querySelectorAll('.close-btn').forEach(btn => {
        btn.addEventListener('click', () => {
            btn.closest('.modal').classList.add('hidden');
        });
    });
    
    // –ß–∞—Ç
    chatInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') sendChatMessage();
    });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–∂–æ–π—Å—Ç–∏–∫–∞
function handleJoystickStart(e) {
    e.preventDefault();
    const rect = joystickElement.getBoundingClientRect();
    joystick.active = true;
    joystick.x = e.touches[0].clientX - rect.left;
    joystick.y = e.touches[0].clientY - rect.top;
}

function handleJoystickMove(e) {
    if (!joystick.active) return;
    e.preventDefault();
    const rect = joystickElement.getBoundingClientRect();
    const touchX = e.touches[0].clientX - rect.left;
    const touchY = e.touches[0].clientY - rect.top;
    
    const centerX = 50;
    const centerY = 50;
    const deltaX = touchX - centerX;
    const deltaY = touchY - centerY;
    
    joystick.angle = Math.atan2(deltaY, deltaX);
    joystick.force = Math.min(Math.sqrt(deltaX * deltaX + deltaY * deltaY), 50) / 50;
}

function handleJoystickEnd() {
    joystick.active = false;
    joystick.force = 0;
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function setupUI() {
    updateStats();
    renderInventory();
    renderCrafting();
    renderSkills();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStats() {
    healthDisplay.textContent = `‚ù§Ô∏è ${player.health}/${player.maxHealth}`;
    xpDisplay.textContent = `‚≠ê –£—Ä.${player.level} (${player.xp}/${player.xpToNextLevel})`;
    
    // –ü–æ–¥—Å—á–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤
    const woodCount = countItem('wood');
    const stoneCount = countItem('stone');
    const ironCount = countItem('iron');
    resourcesDisplay.textContent = `üå≤ ${woodCount} | ‚õèÔ∏è ${stoneCount} | ü™ô ${ironCount}`;
    
    // –í—Ä–µ–º—è —Å—É—Ç–æ–∫
    let timeText = '';
    if (timeOfDay === 'day') timeText = 'üåû –î–µ–Ω—å';
    else if (timeOfDay === 'evening') timeText = 'üåá –í–µ—á–µ—Ä';
    else if (timeOfDay === 'night') timeText = 'üåô –ù–æ—á—å';
    else timeText = 'üåÖ –£—Ç—Ä–æ';
    timeDisplay.textContent = timeText;
}

// –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
function gameLoop() {
    // –î–≤–∏–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    if (joystick.active && isMobile) {
        const speed = player.speed * joystick.force;
        player.x += Math.cos(joystick.angle) * speed;
        player.y += Math.sin(joystick.angle) * speed;
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –º–∏—Ä–∞
    player.x = Math.max(0, Math.min(5000 - 64, player.x));
    player.y = Math.max(0, Math.min(5000 - 64, player.y));
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
    playerElement.style.left = `${player.x}px`;
    playerElement.style.top = `${player.y}px`;
    
    // –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏—Ä–∞ –Ω–∞ –∏–≥—Ä–æ–∫–µ
    const screenWidth = window.innerWidth;
    const screenHeight = window.innerHeight;
    const offsetX = -player.x + screenWidth / 2 - 32;
    const offsetY = -player.y + screenHeight / 2 - 32;
    world.style.transform = `translate(${offsetX}px, ${offsetY}px)`;
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    socket.emit('playerMove', { x: player.x, y: player.y });
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
    updateStats();
    
    requestAnimationFrame(gameLoop);
}

// –¶–∏–∫–ª –¥–Ω—è –∏ –Ω–æ—á–∏
function startDayNightCycle() {
    setInterval(() => {
        dayCycle = (dayCycle + 1) % 1440;
        
        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
        if (dayCycle < 360) timeOfDay = 'day';
        else if (dayCycle < 540) timeOfDay = 'evening';
        else if (dayCycle < 900) timeOfDay = 'night';
        else timeOfDay = 'morning';
        
        // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–∏—è
        let darkness = 0;
        if (timeOfDay === 'evening') darkness = (dayCycle - 360) / 180 * 0.7;
        else if (timeOfDay === 'night') darkness = 0.7;
        else if (timeOfDay === 'morning') darkness = 0.7 - (dayCycle - 900) / 180 * 0.7;
        
        dayNightFilter.style.backgroundColor = `rgba(0, 0, 0, ${darkness})`;
    }, 1000); // 1 —Ä–µ–∞–ª—å–Ω–∞—è —Å–µ–∫—É–Ω–¥–∞ = 1 –∏–≥—Ä–æ–≤–∞—è –º–∏–Ω—É—Ç–∞
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–±–æ–≤
function spawnMobs() {
    setInterval(() => {
        if (mobs.length < 20) {
            const mob = {
                id: `mob-${Date.now()}`,
                type: 'slime',
                x: Math.floor(Math.random() * 5000),
                y: Math.floor(Math.random() * 5000),
                health: 30,
                maxHealth: 30,
                damage: 5,
                speed: 2,
                target: null
            };
            
            mobs.push(mob);
            
            const mobElement = document.createElement('div');
            mobElement.className = 'mob';
            mobElement.id = mob.id;
            mobElement.style.backgroundImage = 'url("assets/slime.png")';
            mobElement.style.left = `${mob.x}px`;
            mobElement.style.top = `${mob.y}px`;
            mobsContainer.appendChild(mobElement);
            
            // –û—Ç–ø—Ä–∞–≤–∫–∞ –º–æ–±–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            socket.emit('mobSpawn', mob);
        }
    }, 5000);
    
    // –ò–ò –º–æ–±–æ–≤
    setInterval(() => {
        mobs.forEach(mob => {
            // –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
            const dx = player.x - mob.x;
            const dy = player.y - mob.y;
            const distance = Math.sqrt(dx * dx + dy * dy);
            
            if (distance < 300) { // –î–∏—Å—Ç–∞–Ω—Ü–∏—è –∞–≥—Ä–µ—Å—Å–∏–∏
                mob.target = { x: player.x, y: player.y };
                
                // –î–≤–∏–∂–µ–Ω–∏–µ –∫ —Ü–µ–ª–∏
                if (distance > 50) { // –î–∏—Å—Ç–∞–Ω—Ü–∏—è –∞—Ç–∞–∫–∏
                    const angle = Math.atan2(dy, dx);
                    mob.x += Math.cos(angle) * mob.speed;
                    mob.y += Math.sin(angle) * mob.speed;
                } else {
                    // –ê—Ç–∞–∫–∞
                    if (Math.random() < 0.1) {
                        player.health -= mob.damage;
                        if (player.health <= 0) {
                            player.health = player.maxHealth;
                            player.x = 2500;
                            player.y = 2500;
                            addMessage('–í—ã —É–º–µ—Ä–ª–∏ –∏ –≤–æ–∑—Ä–æ–¥–∏–ª–∏—Å—å —É –Ω–∞—á–∞–ª–∞!');
                        }
                    }
                }
                
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
                const mobElement = document.getElementById(mob.id);
                if (mobElement) {
                    mobElement.style.left = `${mob.x}px`;
                    mobElement.style.top = `${mob.y}px`;
                }
                
                // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                socket.emit('mobMove', { id: mob.id, x: mob.x, y: mob.y });
            }
        });
    }, 100);
}

// –ê—Ç–∞–∫–∞
function attack() {
    if (player.equipment.weapon) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è –ø–æ –º–æ–±–∞–º
        mobs.forEach(mob => {
            const dx = player.x - mob.x;
            const dy = player.y - mob.y;
            const distance = Math.sqrt(dx * dx + dy * dy);
            
            if (distance < 80) { // –î–∏—Å—Ç–∞–Ω—Ü–∏—è –∞—Ç–∞–∫–∏
                const damage = player.equipment.weapon.damage + player.stats.strength;
                mob.health -= damage;
                
                if (mob.health <= 0) {
                    // –£–±–∏–π—Å—Ç–≤–æ –º–æ–±–∞
                    mob.health = 0;
                    addMessage(`–í—ã —É–±–∏–ª–∏ ${mob.type}!`);
                    
                    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—ã—Ç–∞
                    addXP(10);
                    
                    // –î—Ä–æ–ø –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                    if (Math.random() < 0.5) {
                        createItem('wood', mob.x, mob.y);
                    }
                    if (Math.random() < 0.3) {
                        createItem('stone', mob.x, mob.y);
                    }
                    
                    // –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–±–∞
                    const index = mobs.findIndex(m => m.id === mob.id);
                    if (index !== -1) mobs.splice(index, 1);
                    
                    const mobElement = document.getElementById(mob.id);
                    if (mobElement) mobElement.remove();
                    
                    // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                    socket.emit('mobKilled', mob.id);
                }
            }
        });
    } else {
        addMessage('–£ –≤–∞—Å –Ω–µ—Ç –æ—Ä—É–∂–∏—è!');
    }
}

// –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
function interact() {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏
    let nearestObject = null;
    let minDistance = Infinity;
    
    worldObjects.forEach(obj => {
        const dx = player.x - obj.x;
        const dy = player.y - obj.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        
        if (distance < 100 && distance < minDistance) {
            nearestObject = obj;
            minDistance = distance;
        }
    });
    
    if (nearestObject) {
        if (nearestObject.type === 'tree') {
            // –î–æ–±—ã—á–∞ –¥–µ—Ä–µ–≤–∞
            if (player.equipment.pickaxe) {
                nearestObject.health -= player.equipment.pickaxe.efficiency;
                
                if (nearestObject.health <= 0) {
                    // –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞
                    addMessage('–í—ã —Å—Ä—É–±–∏–ª–∏ –¥–µ—Ä–µ–≤–æ!');
                    createItem('wood', nearestObject.x, nearestObject.y);
                    
                    // –£–¥–∞–ª–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞
                    const index = worldObjects.findIndex(o => o === nearestObject);
                    if (index !== -1) worldObjects.splice(index, 1);
                    
                    // –£–¥–∞–ª–µ–Ω–∏–µ —Å —ç–∫—Ä–∞–Ω–∞
                    const trees = document.querySelectorAll('.tree');
                    trees.forEach(tree => {
                        if (parseInt(tree.style.left) === nearestObject.x && parseInt(tree.style.top) === nearestObject.y) {
                            tree.remove();
                        }
                    });
                    
                    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—ã—Ç–∞
                    addXP(2);
                }
            } else {
                addMessage('–í–∞–º –Ω—É–∂–Ω–∞ –∫–∏—Ä–∫–∞ –¥–ª—è –¥–æ–±—ã—á–∏ –¥–µ—Ä–µ–≤–∞!');
            }
        } else if (nearestObject.type === 'rock') {
            // –î–æ–±—ã—á–∞ –∫–∞–º–Ω—è/–∂–µ–ª–µ–∑–∞
            if (player.equipment.pickaxe) {
                nearestObject.health -= player.equipment.pickaxe.efficiency;
                
                if (nearestObject.health <= 0) {
                    // –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∫–∞–º–Ω—è
                    addMessage(`–í—ã –¥–æ–±—ã–ª–∏ ${nearestObject.resource === 'iron' ? '–∂–µ–ª–µ–∑–æ' : '–∫–∞–º–µ–Ω—å'}!`);
                    createItem(nearestObject.resource, nearestObject.x, nearestObject.y);
                    
                    // –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–º–Ω—è
                    const index = worldObjects.findIndex(o => o === nearestObject);
                    if (index !== -1) worldObjects.splice(index, 1);
                    
                    // –£–¥–∞–ª–µ–Ω–∏–µ —Å —ç–∫—Ä–∞–Ω–∞
                    const rocks = document.querySelectorAll('.rock');
                    rocks.forEach(rock => {
                        if (parseInt(rock.style.left) === nearestObject.x && parseInt(rock.style.top) === nearestObject.y) {
                            rock.remove();
                        }
                    });
                    
                    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—ã—Ç–∞
                    addXP(3);
                }
            } else {
                addMessage('–í–∞–º –Ω—É–∂–Ω–∞ –∫–∏—Ä–∫–∞ –¥–ª—è –¥–æ–±—ã—á–∏ –∫–∞–º–Ω—è!');
            }
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏
    let nearestItem = null;
    minDistance = Infinity;
    
    items.forEach(item => {
        const dx = player.x - item.x;
        const dy = player.y - item.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        
        if (distance < 50 && distance < minDistance) {
            nearestItem = item;
            minDistance = distance;
        }
    });
    
    if (nearestItem) {
        // –ü–æ–¥–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞
        addToInventory(nearestItem.type);
        addMessage(`–í—ã –ø–æ–¥–æ–±—Ä–∞–ª–∏ ${gameItems[nearestItem.type].name}!`);
        
        // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
        const index = items.findIndex(i => i.id === nearestItem.id);
        if (index !== -1) items.splice(index, 1);
        
        const itemElement = document.getElementById(nearestItem.id);
        if (itemElement) itemElement.remove();
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        socket.emit('itemPicked', nearestItem.id);
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –º–∏—Ä–µ
function createItem(itemType, x, y) {
    const item = {
        id: `item-${Date.now()}`,
        type: itemType,
        x: x,
        y: y
    };
    
    items.push(item);
    
    const itemElement = document.createElement('div');
    itemElement.className = 'item';
    itemElement.id = item.id;
    itemElement.style.backgroundImage = `url("${gameItems[itemType].image}")`;
    itemElement.style.left = `${x}px`;
    itemElement.style.top = `${y}px`;
    itemsContainer.appendChild(itemElement);
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    socket.emit('itemCreated', item);
}

// –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
function addToInventory(itemType, count = 1) {
    const item = gameItems[itemType];
    if (!item) return;
    
    if (item.stackable) {
        const existingItem = player.inventory.find(i => i.type === itemType);
        if (existingItem) {
            existingItem.count += count;
        } else {
            player.inventory.push({ type: itemType, count: count });
        }
    } else {
        player.inventory.push({ type: itemType, count: 1 });
    }
    
    renderInventory();
}

function countItem(itemType) {
    const item = player.inventory.find(i => i.type === itemType);
    return item ? item.count : 0;
}

function removeFromInventory(itemType, count = 1) {
    const itemIndex = player.inventory.findIndex(i => i.type === itemType);
    if (itemIndex === -1) return false;
    
    const item = player.inventory[itemIndex];
    if (item.count > count) {
        item.count -= count;
    } else {
        player.inventory.splice(itemIndex, 1);
    }
    
    renderInventory();
    return true;
}

function renderInventory() {
    const inventoryGrid = document.querySelector('.inventory-grid');
    inventoryGrid.innerHTML = '';
    
    player.inventory.forEach((item, index) => {
        const slot = document.createElement('div');
        slot.className = 'inventory-slot';
        slot.innerHTML = `
            <img src="${gameItems[item.type].image}" alt="${gameItems[item.type].name}">
            <span>${item.count > 1 ? item.count : ''}</span>
        `;
        
        slot.addEventListener('click', () => {
            // –≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞ –æ—Ä—É–∂–∏—è/–∫–∏—Ä–∫–∏
            if (gameItems[item.type].type === 'weapon') {
                player.equipment.weapon = { ...gameItems[item.type] };
                addMessage(`–í—ã —ç–∫–∏–ø–∏—Ä–æ–≤–∞–ª–∏ ${gameItems[item.type].name}!`);
            } else if (gameItems[item.type].type === 'pickaxe') {
                player.equipment.pickaxe = { ...gameItems[item.type] };
                addMessage(`–í—ã —ç–∫–∏–ø–∏—Ä–æ–≤–∞–ª–∏ ${gameItems[item.type].name}!`);
            }
        });
        
        inventoryGrid.appendChild(slot);
    });
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤
    for (let i = player.inventory.length; i < 20; i++) {
        const slot = document.createElement('div');
        slot.className = 'inventory-slot';
        inventoryGrid.appendChild(slot);
    }
}

function toggleInventory() {
    inventoryModal.classList.toggle('hidden');
    if (!inventoryModal.classList.contains('hidden')) {
        craftingModal.classList.add('hidden');
        skillsModal.classList.add('hidden');
    }
}

// –ö—Ä–∞—Ñ—Ç–∏–Ω–≥
function renderCrafting() {
    const craftingGrid = document.querySelector('.crafting-grid');
    craftingGrid.innerHTML = '';
    
    craftingRecipes.forEach(recipe => {
        const slot = document.createElement('div');
        slot.className = 'crafting-slot';
        slot.innerHTML = `
            <img src="${gameItems[recipe.result].image}" alt="${gameItems[recipe.result].name}">
            <small>${getRecipeDescription(recipe)}</small>
        `;
        
        slot.addEventListener('click', () => {
            craftItem(recipe.id);
        });
        
        craftingGrid.appendChild(slot);
    });
}

function getRecipeDescription(recipe) {
    return recipe.ingredients.map(ing => {
        const item = gameItems[ing.id];
        return `${item.name} x${ing.count}`;
    }).join(' + ');
}

function craftItem(recipeId) {
    const recipe = craftingRecipes.find(r => r.id === recipeId);
    if (!recipe) return;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
    const canCraft = recipe.ingredients.every(ing => {
        return countItem(ing.id) >= ing.count;
    });
    
    if (canCraft) {
        // –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
        recipe.ingredients.forEach(ing => {
            removeFromInventory(ing.id, ing.count);
        });
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        addToInventory(recipe.result);
        addMessage(`–í—ã —Å–∫—Ä–∞—Ñ—Ç–∏–ª–∏ ${gameItems[recipe.result].name}!`);
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—ã—Ç–∞
        addXP(5);
    } else {
        addMessage('–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞!');
    }
}

function toggleCrafting() {
    craftingModal.classList.toggle('hidden');
    if (!craftingModal.classList.contains('hidden')) {
        inventoryModal.classList.add('hidden');
        skillsModal.classList.add('hidden');
    }
}

// –ü—Ä–æ–∫–∞—á–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
function renderSkills() {
    const skillsList = document.querySelector('.skills-list');
    skillsList.innerHTML = '';
    
    skills.forEach(skill => {
        const skillItem = document.createElement('div');
        skillItem.className = 'skill-item';
        
        const currentLevel = player.stats[skill.id] || 0;
        const canUpgrade = player.stats.statPoints > 0 && currentLevel < skill.maxLevel;
        
        skillItem.innerHTML = `
            <div>
                <strong>${skill.name}</strong>
                <small>${skill.description}</small>
                <div>–£—Ä–æ–≤–µ–Ω—å: ${currentLevel}/${skill.maxLevel}</div>
            </div>
            <button ${!canUpgrade ? 'disabled' : ''}>+</button>
        `;
        
        skillItem.querySelector('button').addEventListener('click', () => {
            upgradeSkill(skill.id);
        });
        
        skillsList.appendChild(skillItem);
    });
}

function upgradeSkill(skillId) {
    if (player.stats.statPoints > 0 && player.stats[skillId] < 10) {
        player.stats[skillId]++;
        player.stats.statPoints--;
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        if (skillId === 'stamina') {
            player.maxHealth = 100 + player.stats.stamina * 10;
            player.health = player.maxHealth;
        }
        
        renderSkills();
        updateStats();
    }
}

function toggleSkills() {
    skillsModal.classList.toggle('hidden');
    if (!skillsModal.classList.contains('hidden')) {
        inventoryModal.classList.add('hidden');
        craftingModal.classList.add('hidden');
    }
}

// –û–ø—ã—Ç –∏ —É—Ä–æ–≤–Ω–∏
function addXP(amount) {
    player.xp += amount;
    
    if (player.xp >= player.xpToNextLevel) {
        player.level++;
        player.xp -= player.xpToNextLevel;
        player.xpToNextLevel = Math.floor(player.xpToNextLevel * 1.5);
        player.stats.statPoints++;
        
        addMessage(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ ${player.level} —É—Ä–æ–≤–Ω—è!`);
        addMessage('–í—ã –ø–æ–ª—É—á–∏–ª–∏ 1 –æ—á–∫–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫!');
    }
    
    updateStats();
}

// –ß–∞—Ç
function addMessage(text, isSystem = false) {
    const message = document.createElement('p');
    message.textContent = text;
    if (isSystem) message.style.color = '#aaa';
    chatMessages.appendChild(message);
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

function sendChatMessage() {
    const text = chatInput.value.trim();
    if (text) {
        socket.emit('chatMessage', text);
        chatInput.value = '';
    }
}

// –°–æ–±—ã—Ç–∏—è Socket.io
function setupSocketEvents() {
    socket.on('connect', () => {
        addMessage('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É', true);
    });
    
    socket.on('disconnect', () => {
        addMessage('–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞', true);
    });
    
    socket.on('chatMessage', (data) => {
        addMessage(`${data.username}: ${data.message}`);
    });
    
    socket.on('playerJoined', (data) => {
        addMessage(`${data.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ`, true);
        players[data.id] = data;
        renderOtherPlayer(data);
    });
    
    socket.on('playerLeft', (id) => {
        addMessage(`${players[id].username} –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É`, true);
        const playerElement = document.getElementById(`player-${id}`);
        if (playerElement) playerElement.remove();
        delete players[id];
    });
    
    socket.on('playerMoved', (data) => {
        if (players[data.id]) {
            players[data.id].x = data.x;
            players[data.id].y = data.y;
            
            const playerElement = document.getElementById(`player-${data.id}`);
            if (playerElement) {
                playerElement.style.left = `${data.x}px`;
                playerElement.style.top = `${data.y}px`;
            }
        }
    });
    
    socket.on('mobSpawned', (mob) => {
        if (!mobs.find(m => m.id === mob.id)) {
            mobs.push(mob);
            
            const mobElement = document.createElement('div');
            mobElement.className = 'mob';
            mobElement.id = mob.id;
            mobElement.style.backgroundImage = 'url("assets/slime.png")';
            mobElement.style.left = `${mob.x}px`;
            mobElement.style.top = `${mob.y}px`;
            mobsContainer.appendChild(mobElement);
        }
    });
    
    socket.on('mobMoved', (data) => {
        const mob = mobs.find(m => m.id === data.id);
        if (mob) {
            mob.x = data.x;
            mob.y = data.y;
            
            const mobElement = document.getElementById(data.id);
            if (mobElement) {
                mobElement.style.left = `${data.x}px`;
                mobElement.style.top = `${data.y}px`;
            }
        }
    });
    
    socket.on('mobKilled', (id) => {
        const index = mobs.findIndex(m => m.id === id);
        if (index !== -1) mobs.splice(index, 1);
        
        const mobElement = document.getElementById(id);
        if (mobElement) mobElement.remove();
    });
    
    socket.on('itemCreated', (item) => {
        if (!items.find(i => i.id === item.id)) {
            items.push(item);
            
            const itemElement = document.createElement('div');
            itemElement.className = 'item';
            itemElement.id = item.id;
            itemElement.style.backgroundImage = `url("${gameItems[item.type].image}")`;
            itemElement.style.left = `${item.x}px`;
            itemElement.style.top = `${item.y}px`;
            itemsContainer.appendChild(itemElement);
        }
    });
    
    socket.on('itemPicked', (id) => {
        const index = items.findIndex(i => i.id === id);
        if (index !== -1) items.splice(index, 1);
        
        const itemElement = document.getElementById(id);
        if (itemElement) itemElement.remove();
    });
}

function renderOtherPlayer(playerData) {
    const playerElement = document.createElement('div');
    playerElement.className = 'player-other';
    playerElement.id = `player-${playerData.id}`;
    playerElement.style.backgroundImage = 'url("assets/player.png")';
    playerElement.style.left = `${playerData.x}px`;
    playerElement.style.top = `${playerData.y}px`;
    playerElement.innerHTML = `<span>${playerData.username}</span>`;
    world.appendChild(playerElement);
}

// –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
function startGame() {
    const username = usernameInput.value.trim();
    if (username.length < 3 || username.length > 16) {
        alert('–ò–º—è –∏–≥—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 16 —Å–∏–º–≤–æ–ª–æ–≤!');
        return;
    }
    
    loginScreen.classList.add('hidden');
    addMessage(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${username}!`, true);
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    socket.emit('playerJoin', {
        username: username,
        x: player.x,
        y: player.y
    });
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('load', initGame);